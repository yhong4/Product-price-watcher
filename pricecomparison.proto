//Single Sign On API
//version: 1
//date: 2019-4-11
// For Price Comparison Access
syntax = "proto3";
package msyrpc;

option java_package = "au.com.msy.rpc";

message Competitor {
	int32 id = 1;
	string name = 2;
	string tier = 3;
}

message Category {
	int32 id = 1;
	string name = 2;
}

message CompetitorPrice {
	string name = 1;
	double price = 2;
}

message Product {
	int32 id = 1; 
	string productCode = 2;
	string productDescription = 3;
	string keywords = 4;
	double costPrice = 5;
	double salesPrice = 6;
	repeated CompetitorPrice competitorPrices = 7;
}

//request 

message GetAllCategoryTypesRequest {}
message GetAllCompetitorTypesRequest {}

message GetAllNewCategoryTypesRequest {}

message GetProductComparisonRequest {
	repeated int32 categoryTypes = 1;
	repeated int32 competitorsTypes = 2;
}


message UpdateProductDescriptionRequest {
	string productCode = 1;
	string updatedDescription = 2;
}

//response 

message CategoryData {
	string type = 1;
	repeated Category data = 2;
}

message AllNewCategoryTypesResponse {
	repeated CategoryData category = 1;
}

message AllCategoryTypesResponse {
	repeated Category categoryDaily = 1;
	repeated Category categoryMondayAndThursday = 2;
	repeated Category categoryTuesdayAndFriday = 3;
	repeated Category categoryWednesdayAndSaturday = 4;
	repeated Category categoryUnassigned = 5;
}

message AllCompetitorTypesResponse {
	repeated Competitor competitorsTierOne = 1;
	repeated Competitor competitorsTierTwo = 2;
}

message ProductComparisonResponse {
	repeated Product productComparison = 1;
}

message UpdateProductDescriptionResponse {
	string status = 1;
}

//manage competitors component
message UpdatedCompetitor {
	int32 competitorId = 1;
	string updatedTier = 2;
}

message UpdateCompetitorTierRequest {
	repeated UpdatedCompetitor updatedCompetitor = 1;
}

message  DeleteCompetitorRequest {
	int32 competitorId = 1;
}

message AddCompetitorRequest {
	string name = 1;
	string tier = 2;
}

message UpdateCompetitorTierResponse{
	string status = 1;
}

message DeleteCompetitorResponse{
	string status = 1;
}

message AddCompetitorResponse{
	string status = 1;
}


//category assignment


message StateCategory {
	int32 id = 1;
	string name = 2;
	string category = 3;
}

message UpdateCategoryStateRequest {
	repeated StateCategory updatedCategories = 1;
}

message UpdateCategoryStateResponse {
	string status = 1;
}

message AllStateCategoryTypesRequest{}

message AllStateCategoryTypesResponse {
	repeated StateCategory categoryDaily = 1;
	repeated StateCategory categoryMondayAndThursday = 2;
	repeated StateCategory categoryTuesdayAndFriday = 3;
	repeated StateCategory categoryWednesdayAndSaturday = 4;
	repeated StateCategory categoryUnassigned = 5;
}

//category margin
message CategoryMargin {
	float target = 1;
	int32 start = 2;
	int32 end = 3;
}

message GetCategoryMarginRequest{}

message GetCategoryMarginResponseItem{
	int32 id = 1;
	string name = 2;
	CategoryMargin margin = 3;
}

message GetCategoryMarginResponse {
	repeated GetCategoryMarginResponseItem categoryMargins = 1;
}

message AddCategoryMarginRequest{
	string category = 1; //competitor id
	int32 priceRangeStart = 2;
	int32 priceRangeEnd = 3;
	float margin = 4;
	int32 id = 5;
}

message AddCategoryMarginResponse{
	string status = 1;
}

message DeleteCategoryMarginRequest{
	int32 id = 1;//competitor id
}

message DeleteCategoryMarginResponse{
	string status = 1;
}


service PriceComparisonService {
	rpc GetAllProductCategories(GetAllCategoryTypesRequest) returns (AllCategoryTypesResponse);
	rpc GetAllNewCategoryTypes(GetAllNewCategoryTypesRequest) returns (AllNewCategoryTypesResponse);

	rpc GetAllCompetitors(GetAllCompetitorTypesRequest) returns (AllCompetitorTypesResponse);
	rpc GetLoadProductComparisonInfomation(GetProductComparisonRequest) returns (ProductComparisonResponse);
	rpc GetLoadFilteredProductComparisonInfomation(GetProductComparisonRequest) returns (ProductComparisonResponse);
	rpc UpdateProductDescription(UpdateProductDescriptionRequest) returns (UpdateProductDescriptionResponse);

	rpc UpdateCompetitorTier(UpdateCompetitorTierRequest) returns (UpdateCompetitorTierResponse);
	rpc DeleteCompetitor(DeleteCompetitorRequest) returns (DeleteCompetitorResponse);
	rpc AddCompetitor(AddCompetitorRequest) returns (AddCompetitorResponse);

	rpc GetAllStateProductCategories(AllStateCategoryTypesRequest) returns (AllStateCategoryTypesResponse);
	rpc UpdateCategoryState(UpdateCategoryStateRequest) returns (UpdateCategoryStateResponse);

	rpc GetCategoryMargin(GetCategoryMarginRequest) returns (GetCategoryMarginResponse);
	rpc AddCategoryMargin(AddCategoryMarginRequest) returns (AddCategoryMarginResponse);
	rpc DeleteCategoryMargin(DeleteCategoryMarginRequest) returns (DeleteCategoryMarginResponse);
}